# https://github.com/GanerCodes/Useful_Python_tomfoolery/blob/master/main.py

lazy_load = lambda i, s: exec(f"""def {s}(*args, **kwargs):
    from {i} import {s}
    return {s}(*args, **kwargs)""", globals())

lazy_load("numpy", "arange")
lazy_load("functools", "reduce")

def __Œì__(x):
    try:
        return x()
    except Exception:
        return None

def __Œ£__(f, a = 0, b = 1, samples = 1000):
    return (s := 1 / samples) and sum(map(Œª.x("s*f(x)", f=f, s=s), ùõ¢(a, b, s * abs(b - a))
))

class __Œª__:
    "Smaller lambda creation"
    def __init__(self, _ = (), code = None, kwargs = None):
        self._ = Œ¥(_)
        self.code = Œî(code)
        self.kwargs = Œî(kwargs, {})
    def __getattr__(self, name):
        return __Œª__(self._ + (name, ))
    def __call__(self, *args, **kwargs):
        if self.code:
            return eval(self.code, globals() | kwargs | self.kwargs | {
                self._[i]: v for i, v in enumerate(args)
            }, locals())
        else:
            return __Œª__(self._, args[0], kwargs)

class __Œ¶__:
    "Magic functions, can consume many operations into it's chain"
    
    FUNCS = "abs add repr aenter aexit aiter and anext await bool bytes ceil class_getitem cmp coerce complex contains delitem delslice dir div divmod enter eq exit float floor floordiv format fspath ge get getitem getnewargs getslice gt hash hex iadd iand idiv ifloordiv ilshift imatmul imod import imul index init_subclass instancecheck int invert ior ipow irshift isub iter itruediv ixor le len length_hint long lshift lt matmul metaclass missing mod mul ne neg next nonzero oct or pos pow prepare radd rand rcmp rdiv rdivmod reduce reduce_ex reversed rfloordiv rlshift rmatmul rmod rmul ror round rpow rrshift rshift rsub rtruediv rxor set set_name setitem setslice sizeof slots str sub subclasscheck subclasses truediv trunc unicode weakref xor".split()
    RESERVED = "repr str bool".split() # More needs to be added to this 100%
    
    def __init__(self, operations = None):
        self.operations = operations or []
    
    def __call__(self, x):
        for func, val in self.operations:
            x = x.__getattribute__(func)(*val)
        return x
    
    def __getattribute__(self, name):
        return super(__Œ¶__, self).__getattribute__(name)

# Initalizing overwrites for magic function 
for i in __Œ¶__.FUNCS:
    func_name = f'__{i}__'
    alias = f'_{i}_' if i in __Œ¶__.RESERVED else func_name
    setattr(__Œ¶__, alias,
        lambda *x, f = func_name: (
            __Œ¶__(x[0].operations.copy() + [(f, x[1:])])
        )
    )

class __Œ®__:
    "Replacement character for œá"
    def __init__(self, func = None):
        self.func = func
    def __call__(self, func = None):
        return __Œ®__(func)

class __œá__:
    "Method chaining"
    class o:
        def __init__(self, *args):
            self.args = args
    
    def Œ®_run(Œ®, val):
        return Œ®.func(val) if Œ®.func else val
    
    def __init__(self, *args, _ = None, **kwargs):
        if not hasattr(self, '_'):
            self._ = Œî(_, [])
        
    def __getattribute__(self, name):
        if name[0] in '_o':
            return super(__œá__, self).__getattribute__(name)
        elif name[0] == '∆í':
            return __œá__(_ = self._.copy() + [self.o()])
        else:
            return __œá__(_ = self._.copy() + [self.o(eval(name))])
     
    def __call__(self, *args, **kwargs):
        if len(self._):
            if len(self._[-1].args) == 0:
                return __œá__(_ = self._[:-1].copy() + [self.o(args[0])])
                
            if len(self._[-1].args) == 2:
                stack = [self._[0]]
                for i in range(len(self._))[1:]:
                    v = self._[i]
                    if len(v.args) == 1 == len(self._[i - 1].args):
                        stack.append(self.o((), {}))
                    stack.append(v)
                
                final = None
                while len(stack):
                    func, (ia, ika) = stack.pop(0).args[0], stack.pop(0).args
                    
                    final = func(
                        *[(__œá__.Œ®_run(i, final) if type(i) == __Œ®__ else i) for i in ia],
                        **{k: (__œá__.Œ®_run(i, final) if type(v) == __Œ®__ else v) for k, v in ika.items()}
                    ) if (ia or ika) else func(final)
                
                return final
        else:
            return __œá__(_ = [self.o(lambda x: x), self.o(args, kwargs)])
                    
        return __œá__(_ = self._.copy() + [self.o(args, kwargs)])

Œî = lambda a, b = None: a if a else b
Œ¥ = lambda x: Œî(x, __Œì__(type(x))) # x or default value of type of x (if it exists)
ùõ¢ = lambda a = 0, b = 10, step = 1: arange(a, b + step, step)
Œì = __Œì__
Œ¶ = __Œ¶__()
Œª = __Œª__()
œá = __œá__()
Œ® = __Œ®__()
Œ≤ = Œª.x
Œ∂ = Œª.x.y
Œ£ = __Œ£__

print(list(( map(Œª.x('œá(x).∆í(Œ¶ ** 3 + 7).str()()'), range(5)) )))

œá.range(5).map((Œ¶ ** 3 + 7)._str_(), Œ®(Œ≤('x[::-1]'))).∆í(''.join).print()()

print(œá.Œ£(Œ¶ * 2, -5, 5)())

print((Œ¶ * 10)(2))
print()
œá.range(10).reversed.map(Œ¶ ** 2, Œ®).list.reduce(Œª.x.y("x - y"), Œ®).print()() # prints -123
print()
print(Œª.x.y("x**y")(2, 5))
print(Œª.a.b.c("str(a) + str(b) + str(c) * 15")(2, 3, 4))
print()
print(list(map(Œª.x("x * 10"), range(5))))
print(list(map(Œ¶ * 10, range(5))))
print()

print(list(map( Œ¶ ** 3 + 7 , range(20))))
print(list(map( (Œ¶ ** 2)._str_()[::-1] , range(9))))